# -*- coding: utf-8 -*-
"""Project_54  model building

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eQE9ZEmOwHHWlmB9c2J49uyj-vfNlyII
"""

import pandas as pd 
import numpy as np

df =pd.read_csv('/content/drive/MyDrive/Final_DataSet2.csv',encoding=('ISO-8859-1'))
df

df['date'] = pd.to_datetime(df['date'], errors='coerce', format='%Y-%m-%d %H:%M:%S')

df.head(5)

df['date'] = pd.to_datetime(df['date']).dt.date

df.to_csv('/content/drive/MyDrive/Lastdata_Set.csv')

df=df.drop(columns=['date','id','url','channelName','dislikes','Subscribers','url'])
df

recom=pd.read_csv('/content/drive/MyDrive/my_recommented.csv',encoding=('ISO-8859-1'))

recom.head()

data = pd.merge(df,recom,on='likes')
data

type(data)

# dff = pd.merge(credits,recom,on='likes')
# dff

# df=credits.drop(columns=['channelUrl','date','id','url'])
# df.head()

data.head(1)['clear_name']

from sklearn.feature_extraction.text import TfidfVectorizer

tfv = TfidfVectorizer(min_df=3, max_features= None,
                       strip_accents='unicode',analyzer='word',token_pattern=r'\w{1,}',
                       ngram_range=(1,3),
                       stop_words='english')

data['clear_name']=data['clear_name'].fillna('')

tfv_matrix= tfv.fit_transform(data['clear_name'])

tfv_matrix

tfv_matrix.shape

pip install sklearn.metrices



from sklearn.metrics.pairwise import pairwise_kernels
from sklearn.metrics.pairwise import sigmoid_kernel

from sklearn.metrics.pairwise import cosine_similarity,linear_kernel

sig = sigmoid_kernel(tfv_matrix, tfv_matrix)

sig[10]

indices = pd.Series(data.index, index=data['title']).drop_duplicates()

indices

indices['java tutorial beginner']

sig[359]

list(enumerate(sig[indices['java tutorial beginner']]))

sorted(list(enumerate(sig[indices['java tutorial beginner']])),key=lambda x: x[1],reverse=True)

def give_rec(clear_name, sig=sig):
  idx = indices[clear_name]
  sig_scores = list(enumerate(sig[idx]))
  sig_scores = sorted(sig_scores,key=lambda x:x[1],reverse=True)
  sig_scores = sig_scores[1:11]
  movie_indices = [i[0] for i in sig_scores]
  return data['title'].iloc[movie_indices]

give_rec('java tutorial beginner')

import pickle

with open('model_pickel','wb') as f:
  pickle.dump(give_rec,f)

with open('model_pickel','rb') as f:
  mp = pickle.load(f)

mp('tell coding interview')

